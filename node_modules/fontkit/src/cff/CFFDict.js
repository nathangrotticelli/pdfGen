// Generated by CoffeeScript 1.8.0
(function() {
  var CFFDict, CFFOperand, r, _;

  _ = require('lodash');

  r = require('restructure');

  CFFOperand = require('./CFFOperand');

  CFFDict = (function() {
    var decodeOperands, encodeOperands;

    function CFFDict(ops) {
      var field, key, _i, _len;
      this.ops = ops != null ? ops : [];
      this.fields = {};
      for (_i = 0, _len = ops.length; _i < _len; _i++) {
        field = ops[_i];
        key = Array.isArray(field[0]) ? field[0][0] << 8 | field[0][1] : field[0];
        this.fields[key] = field;
      }
    }

    decodeOperands = function(type, stream, ret, operands) {
      var i, op, _i, _len, _results;
      if (Array.isArray(type)) {
        _results = [];
        for (i = _i = 0, _len = operands.length; _i < _len; i = ++_i) {
          op = operands[i];
          _results.push(decodeOperands(type[i], stream, ret, [op]));
        }
        return _results;
      } else if (type.decode != null) {
        return type.decode(stream, ret, operands);
      } else {
        switch (type) {
          case 'number':
          case 'offset':
          case 'sid':
            return operands[0];
          case 'boolean':
            return !!operands[0];
          default:
            return operands;
        }
      }
    };

    encodeOperands = function(type, stream, ctx, operands) {
      var i, op, _i, _len, _results;
      if (Array.isArray(type)) {
        _results = [];
        for (i = _i = 0, _len = operands.length; _i < _len; i = ++_i) {
          op = operands[i];
          _results.push(encodeOperands(type[i], stream, ctx, op)[0]);
        }
        return _results;
      } else if (type.encode != null) {
        return type.encode(stream, operands, ctx);
      } else if (typeof operands === 'number') {
        return [operands];
      } else if (typeof operands === 'boolean') {
        return [+operands];
      } else if (Array.isArray(operands)) {
        return operands;
      } else {
        return [operands];
      }
    };

    CFFDict.prototype.decode = function(stream, parent) {
      var b, end, field, key, operands, ret, _name, _ref;
      end = stream.pos + parent.length;
      ret = {};
      operands = [];
      Object.defineProperties(ret, {
        parent: {
          value: parent
        },
        _startOffset: {
          value: stream.pos
        }
      });
      while (stream.pos < end) {
        b = stream.readUInt8();
        if (b <= 21) {
          if (b === 12) {
            b = (b << 8) | stream.readUInt8();
          }
          field = this.fields[b];
          if (!field) {
            throw new Error("Unknown operator " + b);
          }
          ret[field[1]] = decodeOperands(field[2], stream, ret, operands);
          operands = [];
        } else {
          operands.push(CFFOperand.decode(stream, b));
        }
      }
      _ref = this.fields;
      for (key in _ref) {
        field = _ref[key];
        if (ret[_name = field[1]] == null) {
          ret[_name] = field[3];
        }
      }
      return ret;
    };

    CFFDict.prototype.size = function(dict, parent, includePointers) {
      var ctx, field, k, key, len, op, operands, val, _i, _len, _ref;
      if (includePointers == null) {
        includePointers = true;
      }
      ctx = {
        parent: parent,
        val: dict,
        pointerSize: 0,
        startOffset: parent.startOffset || 0
      };
      len = 0;
      _ref = this.fields;
      for (k in _ref) {
        field = _ref[k];
        val = dict[field[1]];
        if ((val == null) || _.isEqual(val, field[3])) {
          continue;
        }
        operands = encodeOperands(field[2], null, ctx, val);
        for (_i = 0, _len = operands.length; _i < _len; _i++) {
          op = operands[_i];
          len += CFFOperand.size(op);
        }
        key = Array.isArray(field[0]) ? field[0] : [field[0]];
        len += key.length;
      }
      if (includePointers) {
        len += ctx.pointerSize;
      }
      return len;
    };

    CFFDict.prototype.encode = function(stream, dict, parent) {
      var ctx, field, i, key, op, operands, ptr, val, _i, _j, _k, _len, _len1, _len2, _ref;
      ctx = {
        pointers: [],
        startOffset: stream.pos,
        parent: parent,
        val: dict,
        pointerSize: 0
      };
      ctx.pointerOffset = stream.pos + this.size(dict, ctx, false);
      _ref = this.ops;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        val = dict[field[1]];
        if ((val == null) || _.isEqual(val, field[3])) {
          continue;
        }
        operands = encodeOperands(field[2], stream, ctx, val);
        for (_j = 0, _len1 = operands.length; _j < _len1; _j++) {
          op = operands[_j];
          CFFOperand.encode(stream, op);
        }
        key = Array.isArray(field[0]) ? field[0] : [field[0]];
        for (_k = 0, _len2 = key.length; _k < _len2; _k++) {
          op = key[_k];
          stream.writeUInt8(op);
        }
      }
      i = 0;
      while (i < ctx.pointers.length) {
        ptr = ctx.pointers[i++];
        ptr.type.encode(stream, ptr.val, ptr.parent);
      }
    };

    return CFFDict;

  })();

  module.exports = CFFDict;

}).call(this);
