// Generated by CoffeeScript 1.8.0
(function() {
  var CFFIndex, r, _;

  r = require('restructure');

  _ = require('lodash');

  CFFIndex = (function() {
    function CFFIndex(type) {
      this.type = type;
    }

    CFFIndex.prototype.decode = function(stream, parent) {
      var count, end, i, offSize, offsetType, pos, ret, start, startPos, _i;
      count = stream.readUInt16BE();
      if (count === 0) {
        return [];
      }
      offSize = stream.readUInt8();
      offsetType = (function() {
        switch (offSize) {
          case 1:
            return r.uint8;
          case 2:
            return r.uint16;
          case 3:
            return r.uint24;
          case 4:
            return r.uint32;
          default:
            throw new Error("Bad offset size in CFFIndex: " + offSize + " " + stream.pos);
        }
      })();
      ret = [];
      startPos = stream.pos + ((count + 1) * offSize) - 1;
      start = offsetType.decode(stream);
      for (i = _i = 0; _i < count; i = _i += 1) {
        end = offsetType.decode(stream);
        if (this.type != null) {
          pos = stream.pos;
          stream.pos = startPos + start;
          parent.length = end - start;
          ret.push(this.type.decode(stream, parent));
          stream.pos = pos;
        } else {
          ret.push({
            offset: startPos + start,
            length: end - start
          });
        }
        start = end;
      }
      stream.pos = startPos + start;
      return ret;
    };

    CFFIndex.prototype.size = function(arr, parent) {
      var item, offset, offsetType, size, type, _i, _len;
      size = 2;
      if (arr.length === 0) {
        return size;
      }
      type = this.type || new r.Buffer;
      offset = 1;
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        item = arr[_i];
        offset += type.size(item, parent);
      }
      offsetType = (function() {
        if (offset <= 0xff) {
          return r.uint8;
        } else if (offset <= 0xffff) {
          return r.uint16;
        } else if (offset <= 0xffffff) {
          return r.uint24;
        } else if (offset <= 0xffffffff) {
          return r.uint32;
        } else {
          throw new Error("Bad offset in CFFIndex");
        }
      })();
      size += 1 + offsetType.size() * (arr.length + 1);
      size += offset - 1;
      return size;
    };

    CFFIndex.prototype.encode = function(stream, arr, parent) {
      var i, item, offset, offsetType, s, sizes, type, _i, _j, _k, _len, _len1, _len2;
      stream.writeUInt16BE(arr.length);
      if (arr.length === 0) {
        return;
      }
      type = this.type || new r.Buffer;
      sizes = [];
      offset = 1;
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        item = arr[_i];
        s = type.size(item, parent);
        sizes.push(s);
        offset += s;
      }
      offsetType = (function() {
        if (offset <= 0xff) {
          return r.uint8;
        } else if (offset <= 0xffff) {
          return r.uint16;
        } else if (offset <= 0xffffff) {
          return r.uint24;
        } else if (offset <= 0xffffffff) {
          return r.uint32;
        } else {
          throw new Error("Bad offset in CFFIndex");
        }
      })();
      stream.writeUInt8(offsetType.size());
      offset = 1;
      offsetType.encode(stream, offset);
      for (i = _j = 0, _len1 = arr.length; _j < _len1; i = ++_j) {
        item = arr[i];
        offset += sizes[i];
        offsetType.encode(stream, offset);
      }
      for (_k = 0, _len2 = arr.length; _k < _len2; _k++) {
        item = arr[_k];
        type.encode(stream, item, parent);
      }
    };

    return CFFIndex;

  })();

  module.exports = CFFIndex;

}).call(this);
