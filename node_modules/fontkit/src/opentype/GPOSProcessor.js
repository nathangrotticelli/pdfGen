// Generated by CoffeeScript 1.8.0
(function() {
  var GPOSProcessor, OpenTypeProcessor,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  OpenTypeProcessor = require('./OpenTypeProcessor');

  GPOSProcessor = (function(_super) {
    __extends(GPOSProcessor, _super);

    function GPOSProcessor() {
      return GPOSProcessor.__super__.constructor.apply(this, arguments);
    }

    GPOSProcessor.prototype.applyPositionValue = function(sequenceIndex, value) {
      if (value.xAdvance != null) {
        return this.advances[this.glyphIndex + sequenceIndex] += value.xAdvance * this.font.scale;
      }
    };

    GPOSProcessor.prototype.applyLookup = function(lookupType, table) {
      var class1, class2, index, pair, set, _i, _len, _results;
      switch (lookupType) {
        case 1:
          index = this.coverageIndex(table.coverage);
          if (index === -1) {
            return;
          }
          switch (table.version) {
            case 1:
              return this.applyPositionValue(0, table.value);
            case 2:
              return this.applyPositionValue(0, table.values[index]);
          }
          break;
        case 2:
          if (!(this.glyphIndex + 1 < this.glyphs.length)) {
            return;
          }
          index = this.coverageIndex(table.coverage);
          if (index === -1) {
            return;
          }
          switch (table.version) {
            case 1:
              set = table.pairSets[index];
              _results = [];
              for (_i = 0, _len = set.length; _i < _len; _i++) {
                pair = set[_i];
                if (!(pair.secondGlyph === this.glyphs[this.glyphIndex + 1].id)) {
                  continue;
                }
                this.applyPositionValue(0, pair.value1);
                this.applyPositionValue(1, pair.value2);
                break;
              }
              return _results;
              break;
            case 2:
              class1 = this.getClassID(0, table.classDef1);
              class2 = this.getClassID(1, table.classDef2);
              if (class1 === -1 || class2 === -1) {
                return;
              }
              pair = table.classRecords[class1][class2];
              this.applyPositionValue(0, pair.value1);
              return this.applyPositionValue(1, pair.value2);
          }
          break;
        default:
          throw new Error("Unsupported GPOS table!");
      }
    };

    return GPOSProcessor;

  })(OpenTypeProcessor);

  module.exports = GPOSProcessor;

}).call(this);
