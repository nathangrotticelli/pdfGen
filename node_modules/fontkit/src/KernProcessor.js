// Generated by CoffeeScript 1.8.0
(function() {
  var KernProcessor;

  KernProcessor = (function() {
    function KernProcessor(font) {
      this.font = font;
      this.kern = font.kern;
    }

    KernProcessor.prototype.process = function(glyphs, advances) {
      var glyph, glyphIndex, left, right, _i, _len, _results;
      _results = [];
      for (glyphIndex = _i = 0, _len = glyphs.length; _i < _len; glyphIndex = ++_i) {
        glyph = glyphs[glyphIndex];
        if (glyphIndex + 1 >= glyphs.length) {
          break;
        }
        left = glyphs[glyphIndex].id;
        right = glyphs[glyphIndex + 1].id;
        _results.push(advances[glyphIndex] += this.getKerning(left, right) * this.font.scale);
      }
      return _results;
    };

    KernProcessor.prototype.getKerning = function(left, right) {
      var pair, res, s, table, val, _i, _j, _len, _len1, _ref, _ref1;
      res = 0;
      _ref = this.kern.tables;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        table = _ref[_i];
        if (table.coverage.crossStream) {
          continue;
        }
        switch (table.version) {
          case 0:
            if (!table.coverage.horizontal) {
              continue;
            }
            break;
          case 1:
            if (table.coverage.vertical || table.coverage.variation) {
              continue;
            }
            break;
          default:
            throw new Error("Unsupported kerning table version " + table.version);
        }
        val = 0;
        s = table.subtable;
        switch (table.format) {
          case 0:
            _ref1 = s.pairs;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              pair = _ref1[_j];
              if (pair.left === left && pair.right === right) {
                val = pair.value;
                break;
              }
            }
            break;
          case 3:
            val = s.kernValue[s.kernIndex[s.leftClass[left] * s.rightClassCount + s.rightClass[right]]];
            break;
          default:
            throw new Error("Unsupported kerning sub-table format " + table.format);
        }
        if (table.coverage.override) {
          res = val;
        } else {
          res += val;
        }
      }
      return res;
    };

    return KernProcessor;

  })();

  module.exports = KernProcessor;

}).call(this);
