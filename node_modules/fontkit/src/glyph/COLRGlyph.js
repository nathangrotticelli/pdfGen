// Generated by CoffeeScript 1.8.0
(function() {
  var COLRGlyph, Glyph,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Glyph = require('./Glyph');

  COLRGlyph = (function(_super) {
    var COLRLayer, get;

    __extends(COLRGlyph, _super);

    function COLRGlyph() {
      return COLRGlyph.__super__.constructor.apply(this, arguments);
    }

    COLRLayer = (function() {
      function COLRLayer(glyph, color) {
        this.glyph = glyph;
        this.color = color;
      }

      return COLRLayer;

    })();

    get = function(key, fn) {
      return Object.defineProperty(COLRGlyph.prototype, key, {
        get: fn,
        enumerable: true
      });
    };

    COLRGlyph.prototype._getBBox = function() {
      var b, bbox, layer, _i, _len, _ref;
      bbox = [Infinity, Infinity, -Infinity, -Infinity];
      _ref = this.layers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        b = layer.glyph.bbox;
        if (b[0] < bbox[0]) {
          bbox[0] = b[0];
        }
        if (b[1] < bbox[1]) {
          bbox[1] = b[1];
        }
        if (b[2] > bbox[2]) {
          bbox[2] = b[2];
        }
        if (b[3] > bbox[3]) {
          bbox[3] = b[3];
        }
      }
      return bbox;
    };

    get('layers', function() {
      var baseLayer, color, colr, cpal, g, high, i, low, mid, rec, _i, _ref, _ref1, _results;
      cpal = this._font.CPAL;
      colr = this._font.COLR;
      low = 0;
      high = colr.baseGlyphRecord.length - 1;
      while (low <= high) {
        mid = (low + high) >> 1;
        rec = colr.baseGlyphRecord[mid];
        if (this.id < rec.gid) {
          high = mid - 1;
        } else if (this.id > rec.gid) {
          low = mid + 1;
        } else {
          baseLayer = rec;
          break;
        }
      }
      if (baseLayer == null) {
        g = this._font._getBaseGlyph(this.id);
        color = {
          red: 0,
          green: 0,
          blue: 0,
          alpha: 255
        };
        return [new COLRLayer(g, color)];
      }
      _results = [];
      for (i = _i = _ref = baseLayer.firstLayerIndex, _ref1 = baseLayer.firstLayerIndex + baseLayer.numLayers; _i < _ref1; i = _i += 1) {
        rec = colr.layerRecords[i];
        color = cpal.colorRecords[rec.paletteIndex];
        g = this._font._getBaseGlyph(rec.gid);
        _results.push(new COLRLayer(g, color));
      }
      return _results;
    });

    COLRGlyph.prototype.render = function(ctx, size) {
      var color, glyph, _i, _len, _ref, _ref1, _results;
      _ref = this.layers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], glyph = _ref1.glyph, color = _ref1.color;
        ctx.fillColor([color.red, color.green, color.blue], color.alpha / 255 * 100);
        _results.push(glyph.render(ctx, size));
      }
      return _results;
    };

    return COLRGlyph;

  })(Glyph);

  module.exports = COLRGlyph;

}).call(this);
