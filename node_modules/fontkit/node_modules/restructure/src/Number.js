// Generated by CoffeeScript 1.7.1
(function() {
  var DecodeStream, Fixed, NumberT,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  DecodeStream = require('./DecodeStream');

  NumberT = (function() {
    function NumberT(type, endian) {
      this.type = type;
      this.endian = endian != null ? endian : 'BE';
      this.fn = this.type;
      if (this.type[this.type.length - 1] !== '8') {
        this.fn += this.endian;
      }
    }

    NumberT.prototype.size = function() {
      return DecodeStream.TYPES[this.type];
    };

    NumberT.prototype.decode = function(stream) {
      return stream['read' + this.fn]();
    };

    NumberT.prototype.encode = function(stream, val) {
      return stream['write' + this.fn](val);
    };

    return NumberT;

  })();

  exports.Number = NumberT;

  exports.uint8 = new NumberT('UInt8');

  exports.uint16 = new NumberT('UInt16');

  exports.uint24 = new NumberT('UInt24');

  exports.uint32 = new NumberT('UInt32');

  exports.int8 = new NumberT('Int8');

  exports.int16 = new NumberT('Int16');

  exports.int24 = new NumberT('Int24');

  exports.int32 = new NumberT('Int32');

  exports.float = new NumberT('Float');

  exports.double = new NumberT('Double');

  Fixed = (function(_super) {
    __extends(Fixed, _super);

    function Fixed(size, endian) {
      Fixed.__super__.constructor.call(this, "Int" + size, endian);
      this._point = 1 << (size >> 1);
    }

    Fixed.prototype.decode = function(stream) {
      return Fixed.__super__.decode.call(this, stream) / this._point;
    };

    Fixed.prototype.encode = function(stream, val) {
      return Fixed.__super__.encode.call(this, stream, val * this._point | 0);
    };

    return Fixed;

  })(NumberT);

  exports.Fixed = Fixed;

  exports.fixed16 = new Fixed(16);

  exports.fixed32 = new Fixed(32);

}).call(this);
